>>>>>>>>>>> 30/12/2024 >>>>>>>
## Add Book Form Input Fields
1. Title - Text
2. Author - Text
3. ISBN - Text
4. Publisher - Text
5. Publication Date - Date
6. Genre - Text
7. Number of Pages - Number
8. Language - Text
9. Description - Textarea


## Add Course Form Input Fields
1. Course Name - Text
2. Course Code - Text
3. Instructor - Text
4. Duration - Number
5. Start Date - Date
6. End Date - Date
7. Credits - Number
8. Description - Textarea


## Add Student Form Input Fields
1. First Name - Text
2. Last Name - Text
3. Student ID - Text
4. Date of Birth - Date
5. Email - Email
6. Phone Number - Tel
7. Address - Textarea
8. Enrollment Date - Date
9. Major - Text
10. GPA - Number
---------------------------------------

>>>>>>>>>>> 01/01/2025 >>>>>>>
 ‚ö†Ô∏è##Use Arror Functions##
1. Write a addBookFunction to handle with Add Book Form
2. Function should print all input value in console as submit form (click on add book button);

result example : 
{
    bookTitle : "Core JavaScript",
    bookAuthor : "mr. xyz",
    bookISBN : "abcde",
    bookPublisher: "xyz publication",
    bookPublicationDate: "01/01/2025",
    bookGenre : "sdfsdf",
    bookPages: 210,
    bookLanguage: "English",
    bookDescription: "this is core javascript book."
}

3. Use - e.preventDefault() - to stop html form basic behaviors

4. Try to create an Array of objects - (an array that holds many objects)

example : const bookList = [{}, {},{},{}...]

5. Try to store form date in localStorage();

üëâüìñ#cheatsheet
const addBookFormHandler = ()=>{
    e.preventDefault();
    let bookTitleTag = document.getElementById("form-book-title);

    #object sample

    const book = {
        bookTitle = bookTitleTag.value;
    }

    console.log(book);


#for array of objects
    const bookList = [];
    bookList.push(book);
}

that's enough hint üòÖ

>>>>>>>>>>> üìÜ 02/01/2025 >>>>>>>

üéØ Today's Task

1. Prepare JavaScript Basics
 - var, let, const
 - data types
 - string and string methods
 - javaScript template strings
2. Re-Prepare ES6 JavaScript Concepts
 
 üî∞ Note : Make hand written notes so that whenever you forget, you just see and remind all. 


 ‚ú® Quote Of Today - ‚ÄúThe only person who can pull me down is myself, and I'm not going to let myself pull me down anymore.‚Äù‚ÄîC. JoyBell C.

 A message üéÄ: Please, don't worry and down think like - "why is he giving such tasks?, I'm giving because we will work with these javaScript Concepts and, I cannot tell you all topics at once. üòå 
 Just break whole into pieces and complete it one by one whole important topics. 

 Please, take care and be safe. Do it with proper rest and time gap, Don't try to complete all at once. 
 Best of luck! üéØ
 Happy Coding! üë®‚Äçüíªüôå

>>>>>>>>>>> üìÜ 03/01/2025 >>>>>>>

üéØ Today's Task

 1. Prepare JavaScript Local Storage
 - what's?
 - why to use?
 - its methods
 - write your own hand notes

2. Re-Prepare ES6 Arrow Function Concepts
- Our Pages will be returned by using Arrow Function
- prepare arrow functions well

3. Write these programs using Arrow Function
Here are 5 practice programs for beginners using arrow functions in JavaScript:

Program 1: Simple Arrow Function

Create an arrow function that takes a name as an argument and returns a greeting message.


const greet = (name) => {
  return `Hello, ${name}!`;
};

console.log(greet("John")); // Output: Hello, John!


Program 2: Arrow Function with Multiple Arguments

Create an arrow function that takes two numbers as arguments and returns their sum.


const addNumbers = (num1, num2) => {
  return num1 + num2;
};

console.log(addNumbers(5, 7)); // Output: 12


Program 3: Arrow Function with Array Methods

Create an arrow function that takes an array of numbers and returns their average.


const calculateAverage = (numbers) => {
  return numbers.reduce((sum, num) => sum + num, 0) / numbers.length;
};

const numbers = [10, 20, 30, 40, 50];
console.log(calculateAverage(numbers)); // Output: 30


Program 4: Arrow Function with Object Methods

Create an arrow function that takes an object with name and age properties and returns a string describing the person.


const describePerson = (person) => {
  return `${person.name} is ${person.age} years old.`;
};

const person = { name: "Jane", age: 25 };
console.log(describePerson(person)); // Output: Jane is 25 years old.


Program 5: Arrow Function with Conditional Statements

Create an arrow function that takes a number as an argument and returns a string indicating whether the number is even or odd.


const isEvenOrOdd = (num) => {
  return num % 2 === 0 ? "Even" : "Odd";
};

console.log(isEvenOrOdd(10)); // Output: Even
console.log(isEvenOrOdd(11)); // Output: Odd

>>>>>>>>>>> üìÜ 07/01/2025 >>>>>>>
üë®‚Äçüíª Please, practice it in codespace.html file üî•

Body Section

Books Table:

- A <h1> element with the text "Books" is used as a heading.
- A <table> element with id="booksTable" and border="1" is created.
- The <thead> section contains a row (<tr>) with column headers (<th>) for book details.
- The <tbody> section is empty and will be populated dynamically.

Courses Table:

- A <h1> element with the text "Courses" is used as a heading.
- A <table> element with id="coursesTable" and border="1" is created.
- The <thead> section contains a row (<tr>) with column headers (<th>) for course details.
- The <tbody> section is empty and will be populated dynamically.

Students Table:

- A <h1> element with the text "Students" is used as a heading.
- A <table> element with id="studentsTable" and border="1" is created.
- The <thead> section contains a row (<tr>) with column headers (<th>) for student details.
- The <tbody> section is empty and will be populated dynamically.


Script Tag:

- The script is defined as a module using type="module".
- The books, courses, and students arrays are imported from sample_data.js.
Function Definition:

- A function populateTable is defined to dynamically populate the tables with data.

Parameters:
- data: The array of objects to be displayed (e.g., books, courses, students).
- tableId: The id of the table to populate.

Table Population Logic:

- The function selects the <tbody> of the specified table using document.getElementById(tableId).querySelector('tbody').

- It iterates over each item in the data array using forEach.

- For each item, a new table row (<tr>) is created.

The row's inner HTML is set using template strings:

- Object.values(item).map(value => <td>${value}</td>).join(''):
- Object.values(item) gets an array of the object's values.
- map creates an array of <td> elements for each value.
- join('') concatenates the <td> elements into a single string.
- The row is appended to the table's <tbody>. 

Function Calls:

The populateTable function is called three times to populate each table:
- populateTable(books, 'booksTable')
- populateTable(courses, 'coursesTable')
- populateTable(students, 'studentsTable')


********* html and javaScript code ********
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dynamic Tables</title>
</head>
<body>
    <h1>Books</h1>
    <table id="booksTable" border="1">
        <thead>
            <tr>
                <th>Title</th>
                <th>Author</th>
                <th>ISBN</th>
                <th>Publisher</th>
                <th>Publication Date</th>
                <th>Genre</th>
                <th>Number of Pages</th>
                <th>Language</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody></tbody>
    </table>

    <h1>Courses</h1>
    <table id="coursesTable" border="1">
        <thead>
            <tr>
                <th>Course Name</th>
                <th>Course Code</th>
                <th>Instructor</th>
                <th>Duration</th>
                <th>Start Date</th>
                <th>End Date</th>
                <th>Credits</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody></tbody>
    </table>

    <h1>Students</h1>
    <table id="studentsTable" border="1">
        <thead>
            <tr>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Student ID</th>
                <th>Date of Birth</th>
                <th>Email</th>
                <th>Phone Number</th>
                <th>Address</th>
                <th>Enrollment Date</th>
                <th>Major</th>
                <th>GPA</th>
            </tr>
        </thead>
        <tbody></tbody>
    </table>

    <script type="module">
        import { books, courses, students } from './sample_data.js';

        function populateTable(data, tableId) {
            const tableBody = document.getElementById(tableId).querySelector('tbody');
            data.forEach(item => {
                const row = document.createElement('tr');
                row.innerHTML = Object.values(item).map(value => `<td>${value}</td>`).join('');
                tableBody.appendChild(row);
            });
        }

        populateTable(books, 'booksTable');
        populateTable(courses, 'coursesTable');
        populateTable(students, 'studentsTable');
    </script>
</body>
</html>